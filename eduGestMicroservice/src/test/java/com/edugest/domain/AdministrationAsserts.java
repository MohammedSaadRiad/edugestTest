package com.edugest.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdministrationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdministrationAllPropertiesEquals(Administration expected, Administration actual) {
        assertAdministrationAutoGeneratedPropertiesEquals(expected, actual);
        assertAdministrationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdministrationAllUpdatablePropertiesEquals(Administration expected, Administration actual) {
        assertAdministrationUpdatableFieldsEquals(expected, actual);
        assertAdministrationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdministrationAutoGeneratedPropertiesEquals(Administration expected, Administration actual) {
        assertThat(actual)
            .as("Verify Administration auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdministrationUpdatableFieldsEquals(Administration expected, Administration actual) {
        assertThat(actual)
            .as("Verify Administration relevant properties")
            .satisfies(a -> assertThat(a.getIdentifier()).as("check identifier").isEqualTo(expected.getIdentifier()))
            .satisfies(a -> assertThat(a.getBirthDate()).as("check birthDate").isEqualTo(expected.getBirthDate()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getNote()).as("check note").isEqualTo(expected.getNote()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdministrationUpdatableRelationshipsEquals(Administration expected, Administration actual) {
        // empty method
    }
}
