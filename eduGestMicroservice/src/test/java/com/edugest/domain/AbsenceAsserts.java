package com.edugest.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AbsenceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceAllPropertiesEquals(Absence expected, Absence actual) {
        assertAbsenceAutoGeneratedPropertiesEquals(expected, actual);
        assertAbsenceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceAllUpdatablePropertiesEquals(Absence expected, Absence actual) {
        assertAbsenceUpdatableFieldsEquals(expected, actual);
        assertAbsenceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceAutoGeneratedPropertiesEquals(Absence expected, Absence actual) {
        assertThat(actual)
            .as("Verify Absence auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceUpdatableFieldsEquals(Absence expected, Absence actual) {
        assertThat(actual)
            .as("Verify Absence relevant properties")
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a -> assertThat(a.getJustification()).as("check justification").isEqualTo(expected.getJustification()))
            .satisfies(a -> assertThat(a.getNote()).as("check note").isEqualTo(expected.getNote()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceUpdatableRelationshipsEquals(Absence expected, Absence actual) {
        assertThat(actual)
            .as("Verify Absence relationships")
            .satisfies(a -> assertThat(a.getStudent()).as("check student").isEqualTo(expected.getStudent()))
            .satisfies(a -> assertThat(a.getSession()).as("check session").isEqualTo(expected.getSession()));
    }
}
